
map $http_upgrade $type {
  default "web";
  websocket "ws";
}

limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

server {
    listen 443 ssl; 
    listen [::]:443 ssl;
    http2 on;  # Enable HTTP/2
    server_name _;
    # Enable SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    ssl_certificate    /etc/nginx/keys/foodmenu.pem;
    ssl_certificate_key    /etc/nginx/keys/foodmenu.key;

    ssl_certificate_by_lua_block {
        local ssl = require "ngx.ssl"
        local domain = ssl.server_name()

        if not domain then
            ngx.log(ngx.ERR, "No SNI hostname provided")
            return
        end

        -- Normalize the domain by removing 'www.' prefix if present
        domain = string.gsub(domain, "^www%.", "")

        local ssl_cert = "/var/ssl/" .. domain .. ".pem"
        local ssl_key = "/var/ssl/" .. domain .. ".key"

        -- Function to check if the file exists
        local file_exists = function(path)
            local f = io.open(path, "r")
            if f then f:close(); return true else return false end
        end

        -- Load certificates dynamically based on the host or fall back to default
        if file_exists(ssl_cert) and file_exists(ssl_key) then
            ssl.clear_certs()
            local cert = assert(ssl.load_certificate_chain(ssl_cert))
            assert(ssl.set_cert(cert))
            local key = assert(ssl.load_priv_key(ssl_key))
            assert(ssl.set_priv_key(key))
        else
            ngx.log(ngx.INFO, "Using default certificate for domain: ", domain)
        end
    }
    root /var/www/foodmenu/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    client_max_body_size 15M;
    client_body_timeout 10s;
    client_header_timeout 10s;
    
    # Serve the Laravel app for HTTPS requests
    location / {
        try_files /nonexistent @$type;
        limit_req zone=one burst=10 nodelay;
    }
  
    location @web {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    # WebSocket Proxy
    location @ws {
        proxy_pass http://websockets:6001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_read_timeout     60;
        proxy_connect_timeout  60;
        proxy_redirect         off;
        proxy_cache_bypass $http_upgrade;
    }

    # PHP processing
    location ~ \.php$ {
        fastcgi_pass php:9000;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # Security: deny access to hidden files
    location ~ /\.(?!well-known).* {
        deny all;
    }
}