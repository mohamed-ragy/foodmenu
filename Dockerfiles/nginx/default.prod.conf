map $http_upgrade $type {
  default "web";
  websocket "ws";
}

limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;  # Enable HTTP/2
    server_name _;  # Default server block

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Default SSL Certificates
    ssl_certificate     /etc/nginx/keys/foodmenu.pem;
    ssl_certificate_key /etc/nginx/keys/foodmenu.key;

    # Lua Block for Dynamic SSL Certificates
    ssl_certificate_by_lua_block {
        local ssl = require "ngx.ssl"

        -- Function to log and return on error
        local function handle_error(message, err)
            ngx.log(ngx.ERR, message, err or "")
            return
        end

        -- Retrieve the SNI server name
        local server_name, err = ssl.server_name()
        if not server_name then
            handle_error("No SNI hostname provided: ", err)
            return
        end

        -- Normalize the domain by removing 'www.' prefix if present
        server_name = server_name:gsub("^www%.", "")

        -- Construct paths to the SSL certificate and key
        local ssl_cert_path = "/var/ssl/" .. server_name .. "/origin.pem"
        local ssl_key_path  = "/var/ssl/" .. server_name .. "/origin.key"

        -- Function to check if a file exists
        local function file_exists(path)
            local file = io.open(path, "r")
            if file then
                file:close()
                return true
            end
            return false
        end

        -- Check if both certificate and key exist
        if file_exists(ssl_cert_path) and file_exists(ssl_key_path) then
            ngx.log(ngx.INFO, "Loading SSL certificate for domain: ", server_name)

            -- Function to read file content
            local function read_file(path)
                local file, err = io.open(path, "rb")
                if not file then
                    handle_error("Failed to open file: " .. path .. " Error: ", err)
                    return nil
                end
                local content = file:read("*all")
                file:close()
                return content
            end

            -- Read and set the certificate
            local cert_pem = read_file(ssl_cert_path)
            if not cert_pem then return end

            local der_cert, err = ssl.cert_pem_to_der(cert_pem)
            if not der_cert then
                handle_error("Failed to convert certificate to DER: ", err)
                return
            end

            local ok, err = ssl.set_der_cert(der_cert)
            if not ok then
                handle_error("Failed to set DER certificate: ", err)
                return
            end

            -- Read and set the private key
            local key_pem = read_file(ssl_key_path)
            if not key_pem then return end

            local der_key, err = ssl.priv_key_pem_to_der(key_pem)
            if not der_key then
                handle_error("Failed to convert private key to DER: ", err)
                return
            end

            ok, err = ssl.set_der_priv_key(der_key)
            if not ok then
                handle_error("Failed to set DER private key: ", err)
                return
            end

            ngx.log(ngx.INFO, "Successfully loaded SSL certificate and key for domain: ", server_name)
        else
            ngx.log(ngx.INFO, "Using default SSL certificate for domain: ", server_name)
            -- Default certificate is already set; no further action needed
        end
    }

    # Document Root and Security Headers
    root /var/www/foodmenu/public;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    index index.php;
    charset utf-8;

    # Client Request Settings
    client_max_body_size 15M;
    client_body_timeout 10s;
    client_header_timeout 10s;

    # Rate Limiting and Request Handling
    location / {
        try_files /nonexistent @$type;
        limit_req zone=one burst=10 nodelay;
    }

    location @web {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Static File Handling
    location = /favicon.ico { 
        access_log off;
        log_not_found off;
    }
    location = /robots.txt { 
        access_log off;
        log_not_found off;
    }

    # Error Handling
    error_page 404 /index.php;

    # WebSocket Proxy
    location @ws {
        proxy_pass http://websockets:6001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_redirect off;
        proxy_cache_bypass $http_upgrade;
    }

    # PHP Processing
    location ~ \.php$ {
        fastcgi_pass php:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # Security: Deny Access to Hidden Files
    location ~ /\.(?!well-known).* {
        deny all;
    }
}